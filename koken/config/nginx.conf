worker_processes  4;
error_log stderr warn;
pid /run/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main_timed  '$remote_addr - $remote_user [$time_local] "$request" '
                            '$status $body_bytes_sent "$http_referer" '
                            '"$http_user_agent" "$http_x_forwarded_for" '
                            '$request_time $upstream_response_time $pipe $upstream_cache_status';

    error_log /var/log/nginx-error.log;
    access_log /var/log/nginx-access.log;

    keepalive_timeout  65;


server {
    listen                      80;
    root                        /var/www/html;
    index                       index.php index.html index.htm;

    client_max_body_size 4G;
 
    # Enable gzip. Highly recommending for best peformance
    gzip                        on;
    gzip_comp_level             6;
    gzip_types                  text/css text/javascript application/json application/javascript application/x-javascript;
 
    # By default, do not set expire headers
    expires                     0;
 
    # Set expires header for console CSS and JS.
    # These files are timestamped with each new release, so it is safe to cache them agressively.
    location ~ "console_.*.(js|css)$" {
        expires                 max;
    }
 
    # Catch image requests and pass them back to PHP if a cache does not yet exist
    location ~ "^/storage/cache/images(/(([0-9]{3}/[0-9]{3})|custom)/.*)$" {
        # Cached images have timestamps in the URL, so it is safe to set
        # aggresive cache headers here.
        expires                 max;
        try_files               $uri /i.php?path=$1;
    }
 
    # Catch .css.lens requests and serve cache when possible
    location ~ "(lightbox-)?settings.css.lens$" {
        default_type            text/css;
        try_files               /storage/cache/site/${uri} /app/site/site.php?url=/$1settings.css.lens;
    }
 
    # Catch koken.js requests and serve cache when possible
    location ~ koken.js$ {
        default_type            text/javascript;
        try_files               /storage/cache/site/${uri} /app/site/site.php?url=/koken.js;
    }
 
    # Standard site requests are cached with .html extensions
    set                         $cache_ext 'html';
 
    # PJAX requests contain the _pjax GET parameter and are cached with .phtml extensions
    if ($arg__pjax) {
        set                     $cache_ext 'phtml';
    }
 
    if ($request_method != 'GET') {
        set                     $cache_ext 'nocache';
    }
 
    # If share_to_tumblr cookie is preset, disable caching (long story)
    if ($http_cookie ~* "share_to_tumblr" ) {
        set                     $cache_ext 'nocache';
    }
 
    # Prevent web requests to Koken's .cache files
    location ~ .cache$ {
        deny                    all;
    }
 
    # All other requests get passed back to Koken unless file already exists
    location / {
        mp4;
        mp4_buffer_size 1m;
        mp4_max_buffer_size 5m;
        try_files               $uri $uri/ /storage/cache/site/${uri} /storage/cache/site/${uri}cache.$cache_ext /app/site/site.php?url=$uri&$args;
    }
 
    # Catch albums requests and pass them back to PHP if a cache does not yet exist
    location ~ "^/storage/cache/albums(/([0-9]{3}/[0-9]{3})/.*)$" {
        # Cached albums have timestamps in the URL, so it is safe to set
        expires                 max;
        try_files               $uri /a.php?path=$1;
    }

    # HTTP basic authorization for index.php
#    location ~ index.php$ {
#        auth_basic "Auth";
#        auth_basic_user_file /var/www/.htpasswd;
#        try_files               $uri =404;
#        fastcgi_pass  127.0.0.1:9000;
#        fastcgi_pass_request_body On;
#        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
#        fastcgi_param SCRIPT_NAME $fastcgi_script_name;
#        include fastcgi_params;
#        fastcgi_split_path_info ^(.+.php)(/.+)$;
#        fastcgi_index           index.php;
#    }
 
    # pass all other PHP requests to main backend
    location ~ .php$ {
        try_files               $uri =404;
        fastcgi_pass  127.0.0.1:9000;
        fastcgi_pass_request_body On;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param SCRIPT_NAME $fastcgi_script_name;
        include fastcgi_params;
        fastcgi_split_path_info ^(.+.php)(/.+)$;
        fastcgi_index           index.php;
    } 

  }

}
